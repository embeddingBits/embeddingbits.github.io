<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Golang on eBits</title>
    <link>http://localhost:1313/tags/golang/</link>
    <description>Recent content in Golang on eBits</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-IN</language>
    <managingEditor>me@example.com (John Doe)</managingEditor>
    <webMaster>me@example.com (John Doe)</webMaster>
    <copyright>Amiitesh</copyright>
    <lastBuildDate>Mon, 05 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang Philosophy</title>
      <link>http://localhost:1313/blog/go_phil/</link>
      <pubDate>Mon, 05 Aug 2024 00:00:00 +0000</pubDate><author>me@example.com (John Doe)</author>
      <guid>http://localhost:1313/blog/go_phil/</guid>
      <description>&lt;h1 id=&#34;what-is-golang-where-and-why-is-it-used&#34;&gt;What is Golang? Where and Why is it used?&lt;/h1&gt;&#xA;&lt;p&gt;Go (or Golang) is an open-source programming language developed by Google.&lt;br&gt;&#xA;Go has many use cases — it’s used in building &lt;strong&gt;microservices&lt;/strong&gt;, &lt;strong&gt;cloud computing&lt;/strong&gt;, &lt;strong&gt;web applications&lt;/strong&gt;, and &lt;strong&gt;CLI tools&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Go is a &lt;strong&gt;statically typed language&lt;/strong&gt; and its structure and syntax resemble the &lt;strong&gt;C programming language&lt;/strong&gt;.&lt;br&gt;&#xA;Due to its &lt;strong&gt;fast startup time&lt;/strong&gt;, &lt;strong&gt;low runtime overhead&lt;/strong&gt;, and &lt;strong&gt;platform independence&lt;/strong&gt;, Go has become a popular language for writing microservices and performance-critical applications.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h1 id="what-is-golang-where-and-why-is-it-used">What is Golang? Where and Why is it used?</h1>
<p>Go (or Golang) is an open-source programming language developed by Google.<br>
Go has many use cases — it’s used in building <strong>microservices</strong>, <strong>cloud computing</strong>, <strong>web applications</strong>, and <strong>CLI tools</strong>.</p>
<p>Go is a <strong>statically typed language</strong> and its structure and syntax resemble the <strong>C programming language</strong>.<br>
Due to its <strong>fast startup time</strong>, <strong>low runtime overhead</strong>, and <strong>platform independence</strong>, Go has become a popular language for writing microservices and performance-critical applications.</p>
<p>Go is also famous for its <strong>concurrency</strong>, meaning it can execute multiple processes simultaneously using <strong>goroutines</strong> (lightweight threads).<br>
It includes built-in package management and was designed to address issues like <strong>slow build times</strong> and <strong>difficulty in writing cross-language tools</strong>.</p>
<p>In this blog, we’ll explore what Go is and how to get started with it.</p>
<hr>
<h2 id="history-of-go">History of Go</h2>
<p>Go was created by Google in <strong>2007</strong> to solve internal software engineering issues and serve as an alternative to <strong>C++</strong>.<br>
Its goal was to create a language that combined simplicity and safety from <strong>Python</strong>, scalability from <strong>JavaScript</strong>, and performance from <strong>C/C++</strong>.</p>
<p>Go was released as an open-source project in <strong>2009</strong>, allowing community contributions.</p>
<p>In <strong>2022</strong>, Go introduced <strong>Generics</strong>, one of its biggest updates (similar to Java’s generic typing system).</p>
<p>Today, major companies like <strong>Netflix</strong>, <strong>Microsoft</strong>, <strong>Cloudflare</strong>, <strong>Docker</strong>, <strong>Twitch</strong>, and <strong>Dropbox</strong> use Go in production systems.</p>
<hr>
<h2 id="philosophy-of-go">Philosophy of Go</h2>
<p>The philosophy behind Go focuses on <strong>simplicity</strong>, <strong>efficiency</strong>, and <strong>practicality</strong>.<br>
Here are some core principles:</p>
<ul>
<li><strong>Simplicity:</strong> Go only adds features that are useful long-term, keeping the language minimal and clear.</li>
<li><strong>Efficiency:</strong> Go was designed for performance — especially evident in its concurrency model.</li>
<li><strong>Error Handling:</strong> Go provides built-in error handling through return values (commonly as the second argument in functions).</li>
<li><strong>Pragmatism:</strong> Go focuses on solving real-world problems efficiently rather than being overly abstract.</li>
</ul>
<hr>
<h2 id="features-of-go">Features of Go</h2>
<ul>
<li><strong>Standard Library:</strong> Go includes a large standard library covering math, networking, I/O, and more.</li>
<li><strong>Package Management:</strong> The <code>go</code> CLI supports package creation, importing, and publishing.</li>
<li><strong>Static Typing:</strong> Types are checked at compile-time to prevent runtime errors common in dynamically typed languages.</li>
<li><strong>Unit Test Support:</strong> Built-in testing tools ensure code quality and maintainability.</li>
<li><strong>Platform Independence:</strong> Go runs seamlessly on all major operating systems and architectures.</li>
<li><strong>Concurrency:</strong> Goroutines allow multiple tasks to execute in parallel, a cornerstone feature of Go.</li>
</ul>
<hr>
<h2 id="useful-go-commands">Useful Go Commands</h2>
<h3 id="go-run"><code>go run</code></h3>
<p>Compiles and executes Go code simultaneously:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">go run filename.go</span></span></code></pre></div>]]></content:encoded>
    </item>
  </channel>
</rss>
